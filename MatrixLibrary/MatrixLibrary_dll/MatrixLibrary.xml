<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MatrixLibrary</name>
    </assembly>
    <members>
        <member name="T:MatrixLibrary.Matrix">
            <summary>
            Matrix Library .Net v2.0 By Anas Abidi, 2004.
            
            The Matrix Library contains Class Matrix which provides many 
            static methods for making various matrix operations on objects
            derived from the class or on arrays defined as double. The 
            '+','-','*' operators are overloaded to work with the objects
            derived from the matrix class.
            </summary>
        </member>
        <member name="M:MatrixLibrary.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Matrix object constructor, constructs an empty
            matrix with dimensions: rows = noRows and cols = noCols.
            </summary>
            <param name="noRows"> no. of rows in this matrix </param>
            <param name="noCols"> no. of columns in this matrix</param>
        </member>
        <member name="M:MatrixLibrary.Matrix.#ctor(System.Double[0:,0:])">
            <summary>
            Matrix object constructor, constructs a matrix from an
            already defined array object.
            </summary>
            <param name="Mat">the array the matrix will contain</param>
        </member>
        <member name="M:MatrixLibrary.Matrix.OneD_2_TwoD(System.Double[])">
            <summary>
            Returns the 2D form of a 1D array. i.e. array with
            dimension[n] is returned as an array with dimension [n,1]. 
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat"> 
            the array to convert, with dimesion [n] 
            </param>
            <returns> the same array but with [n,1] dimension </returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.TwoD_2_OneD(System.Double[0:,0:])">
            <summary>
            Returns the 1D form of a 2D array. i.e. array with
            dimension[n,1] is returned as an array with dimension [n]. 
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat">
            the array to convert, with dimesions [n,1] 
            </param>
            <returns>the same array but with [n] dimension</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.Identity(System.Int32)">
            <summary>
            Returns an Identity matrix with dimensions [n,n] in the from of an array.
            </summary>
            <param name="n">the no. of rows or no. cols in the matrix</param>
            <returns>An identity Matrix with dimensions [n,n] in the form of an array</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.Add(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the summation of two matrices with compatible 
            dimensions.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First array in the summation</param>
            <param name="Mat2">Second array in the summation</param>
            <returns>Sum of Mat1 and Mat2 as an array</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.Add(MatrixLibrary.Matrix,MatrixLibrary.Matrix)">
            <summary>
            Returns the summation of two matrices with compatible 
            dimensions.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First matrix in the summation</param>
            <param name="Mat2">Second matrix in the summation</param>
            <returns>Sum of Mat1 and Mat2 as a Matrix object</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.op_Addition(MatrixLibrary.Matrix,MatrixLibrary.Matrix)">
            <summary>
            Returns the summation of two matrices with compatible 
            dimensions.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First Matrix object in the summation</param>
            <param name="Mat2">Second Matrix object in the summation</param>
            <returns>Sum of Mat1 and Mat2 as a Matrix object</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.Subtract(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the difference of two matrices with compatible 
            dimensions.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First array in the subtraction</param>
            <param name="Mat2">Second array in the subtraction</param>
            <returns>Difference of Mat1 and Mat2 as an array</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.Subtract(MatrixLibrary.Matrix,MatrixLibrary.Matrix)">
            <summary>
            Returns the difference of two matrices with compatible 
            dimensions.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First matrix in the subtraction</param>
            <param name="Mat2">Second matrix in the subtraction</param>
            <returns>Difference of Mat1 and Mat2 as a Matrix object</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.op_Subtraction(MatrixLibrary.Matrix,MatrixLibrary.Matrix)">
            <summary>
            Returns the difference of two matrices with compatible 
            dimensions.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First Matrix object in the subtraction</param>
            <param name="Mat2">Second Matrix object in the subtraction</param>
            <returns>Difference of Mat1 and Mat2 as a Matrix object</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.Multiply(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the multiplication of two matrices with compatible 
            dimensions.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat1">First array in multiplication</param>
            <param name="Mat2">Second array in multiplication</param>
            <returns>Mat1 multiplied by Mat2 as an array</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.Multiply(MatrixLibrary.Matrix,MatrixLibrary.Matrix)">
            <summary>
            Returns the multiplication of two matrices with compatible 
            dimensions OR the cross-product of two vectors.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat1">
            First matrix or vector (i.e: dimension [3,1]) object in 
            multiplication
            </param>
            <param name="Mat2">
            Second matrix or vector (i.e: dimension [3,1]) object in 
            multiplication
            </param>
            <returns>Mat1 multiplied by Mat2 as a Matrix object</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.op_Multiply(MatrixLibrary.Matrix,MatrixLibrary.Matrix)">
            <summary>
            Returns the multiplication of two matrices with compatible 
            dimensions OR the cross-product of two vectors.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat1">
            First matrix or vector (i.e: dimension [3,1]) object in 
            multiplication
            </param>
            <param name="Mat2">
            Second matrix or vector (i.e: dimension [3,1]) object in 
            multiplication
            </param>
            <returns>Mat1 multiplied by Mat2 as a Matrix object</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.Det(System.Double[0:,0:])">
            <summary>
            Returns the determinant of a matrix with [n,n] dimension.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat">
            Array with [n,n] dimension whose determinant is to be found
            </param>
            <returns>Determinant of the array</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.Det(MatrixLibrary.Matrix)">
            <summary>
            Returns the determinant of a matrix with [n,n] dimension.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat">
            Matrix object with [n,n] dimension whose determinant is to be found
            </param>
            <returns>Determinant of the Matrix object</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.Inverse(System.Double[0:,0:])">
            <summary>
            Returns the inverse of a matrix with [n,n] dimension 
            and whose determinant is not zero.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat">
            Array with [n,n] dimension whose inverse is to be found
            </param>
            <returns>Inverse of the array as an array</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.Inverse(MatrixLibrary.Matrix)">
            <summary>
            Returns the inverse of a matrix with [n,n] dimension 
            and whose determinant is not zero.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat">
            Matrix object with [n,n] dimension whose inverse is to be found
            </param>
            <returns>Inverse of the matrix as a Matrix object</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.Transpose(System.Double[0:,0:])">
            <summary>
            Returns the transpose of a matrix.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat">Array whose transpose is to be found</param>
            <returns>Transpose of the array as an array</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.Transpose(MatrixLibrary.Matrix)">
            <summary>
            Returns the transpose of a matrix.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat">Matrix object whose transpose is to be found</param>
            <returns>Transpose of the Matrix object as a Matrix object</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.SVD(System.Double[0:,0:],System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Evaluates the Singular Value Decomposition of a matrix, 
            returns the  matrices S, U and V. Such that a given
            Matrix = U x S x V'.
            In case of an error the error is raised as an exception. 
            Note: This method is based on the 'Singular Value Decomposition'
            section of Numerical Recipes in C by William H. Press,
            Saul A. Teukolsky, William T. Vetterling and Brian P. Flannery,
            University of Cambridge Press 1992.  
            </summary>
            <param name="Mat_">Array whose SVD is to be computed</param>
            <param name="S_">An array where the S matrix is returned</param>
            <param name="U_">An array where the U matrix is returned</param>
            <param name="V_">An array where the V matrix is returned</param>
        </member>
        <member name="M:MatrixLibrary.Matrix.SVD(MatrixLibrary.Matrix,MatrixLibrary.Matrix@,MatrixLibrary.Matrix@,MatrixLibrary.Matrix@)">
            <summary>
            Evaluates the Singular Value Decomposition of a matrix, 
            returns the  matrices S, U and V. Such that a given
            Matrix = U x S x V'.
            In case of an error the error is raised as an exception. 
            Note: This method is based on the 'Singular Value Decomposition'
            section of Numerical Recipes in C by William H. Press,
            Saul A. Teukolsky, William T. Vetterling and Brian P. Flannery,
            University of Cambridge Press 1992.
            </summary>
            <param name="Mat">Matrix object whose SVD is to be computed</param>
            <param name="S">A Matrix object where the S matrix is returned</param>
            <param name="U">A Matrix object where the U matrix is returned</param>
            <param name="V">A Matrix object where the V matrix is returned</param>
        </member>
        <member name="M:MatrixLibrary.Matrix.LU(System.Double[0:,0:],System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Returns the LU Decomposition of a matrix. 
            the output is: lower triangular matrix L, upper
            triangular matrix U, and permutation matrix P so that
            P*X = L*U.
            In case of an error the error is raised as an exception.
            Note: This method is based on the 'LU Decomposition and Its Applications'
            section of Numerical Recipes in C by William H. Press,
            Saul A. Teukolsky, William T. Vetterling and Brian P. Flannery,
            University of Cambridge Press 1992.  
            </summary>
            <param name="Mat">Array which will be LU Decomposed</param>
            <param name="L">An array where the lower traingular matrix is returned</param>
            <param name="U">An array where the upper traingular matrix is returned</param>
            <param name="P">An array where the permutation matrix is returned</param>
        </member>
        <member name="M:MatrixLibrary.Matrix.LU(MatrixLibrary.Matrix,MatrixLibrary.Matrix@,MatrixLibrary.Matrix@,MatrixLibrary.Matrix@)">
            <summary>
            Returns the LU Decomposition of a matrix. 
            the output is: lower triangular matrix L, upper
            triangular matrix U, and permutation matrix P so that
            P*X = L*U.
            In case of an error the error is raised as an exception. 
            Note: This method is based on the 'LU Decomposition and Its Applications'
            section of Numerical Recipes in C by William H. Press,
            Saul A. Teukolsky, William T. Vetterling and Brian P. Flannery,
            University of Cambridge Press 1992.  
            </summary>
            <param name="Mat">Matrix object which will be LU Decomposed</param>
            <param name="L">A Matrix object where the lower traingular matrix is returned</param>
            <param name="U">A Matrix object where the upper traingular matrix is returned</param>
            <param name="P">A Matrix object where the permutation matrix is returned</param>
        </member>
        <member name="M:MatrixLibrary.Matrix.SolveLinear(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Solves a set of n linear equations A.X = B, and returns
            X, where A is [n,n] and B is [n,1]. 
            In the same manner if you need to compute: inverse(A).B, it is
            better to use this method instead, as it is much faster.  
            In case of an error the error is raised as an exception. 
            Note: This method is based on the 'LU Decomposition and Its Applications'
            section of Numerical Recipes in C by William H. Press,
            Saul A. Teukolsky, William T. Vetterling and Brian P. Flannery,
            University of Cambridge Press 1992.
            </summary>
            <param name="MatA">The array 'A' on the left side of the equations A.X = B</param>
            <param name="MatB">The array 'B' on the right side of the equations A.X = B</param>
            <returns>Array 'X' in the system of equations A.X = B</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.SolveLinear(MatrixLibrary.Matrix,MatrixLibrary.Matrix)">
            <summary>
            Solves a set of n linear equations A.X = B, and returns
            X, where A is [n,n] and B is [n,1]. 
            In the same manner if you need to compute: inverse(A).B, it is
            better to use this method instead, as it is much faster.  
            In case of an error the error is raised as an exception. 
            Note: This method is based on the 'LU Decomposition and Its Applications'
            section of Numerical Recipes in C by William H. Press,
            Saul A. Teukolsky, William T. Vetterling and Brian P. Flannery,
            University of Cambridge Press 1992.
            </summary>
            <param name="MatA">Matrix object 'A' on the left side of the equations A.X = B</param>
            <param name="MatB">Matrix object 'B' on the right side of the equations A.X = B</param>
            <returns>Matrix object 'X' in the system of equations A.X = B</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.Rank(System.Double[0:,0:])">
            <summary>
            Returns the rank of a matrix.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat">An array whose rank is to be found</param>
            <returns>The rank of the array</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.Rank(MatrixLibrary.Matrix)">
            <summary>
            Returns the rank of a matrix.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat">a Matrix object whose rank is to be found</param>
            <returns>The rank of the Matrix object</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.PINV(System.Double[0:,0:])">
            <summary>
            Returns the pseudoinverse of a matrix, such that
            X = PINV(A) produces a matrix 'X' of the same dimensions
            as A' so that A*X*A = A, X*A*X = X.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat">An array whose pseudoinverse is to be found</param>
            <returns>The pseudoinverse of the array as an array</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.PINV(MatrixLibrary.Matrix)">
            <summary>
            Returns the pseudoinverse of a matrix, such that
            X = PINV(A) produces a matrix 'X' of the same dimensions
            as A' so that A*X*A = A, X*A*X = X.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat">a Matrix object whose pseudoinverse is to be found</param>
            <returns>The pseudoinverse of the Matrix object as a Matrix Object</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.Eigen(System.Double[0:,0:],System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Returns the Eigenvalues and Eigenvectors of a real symmetric
            matrix, which is of dimensions [n,n]. 
            In case of an error the error is raised as an exception.
            Note: This method is based on the 'Eigenvalues and Eigenvectors of a TridiagonalMatrix'
            section of Numerical Recipes in C by William H. Press,
            Saul A. Teukolsky, William T. Vetterling and Brian P. Flannery,
            University of Cambridge Press 1992.
            </summary>
            <param name="Mat">
            The array whose Eigenvalues and Eigenvectors are to be found
            </param>
            <param name="d">An array where the eigenvalues are returned</param>
            <param name="v">An array where the eigenvectors are returned</param>
        </member>
        <member name="M:MatrixLibrary.Matrix.Eigen(MatrixLibrary.Matrix,MatrixLibrary.Matrix@,MatrixLibrary.Matrix@)">
            <summary>
            Returns the Eigenvalues and Eigenvectors of a real symmetric
            matrix, which is of dimensions [n,n]. In case of an error the
            error is raised as an exception.
            Note: This method is based on the 'Eigenvalues and Eigenvectors of a TridiagonalMatrix'
            section of Numerical Recipes in C by William H. Press,
            Saul A. Teukolsky, William T. Vetterling and Brian P. Flannery,
            University of Cambridge Press 1992.
            </summary>
            <param name="Mat">
            The Matrix object whose Eigenvalues and Eigenvectors are to be found
            </param>
            <param name="d">A Matrix object where the eigenvalues are returned</param>
            <param name="v">A Matrix object where the eigenvectors are returned</param>
        </member>
        <member name="M:MatrixLibrary.Matrix.ScalarMultiply(System.Double,System.Double[0:,0:])">
            <summary>
            Returns the multiplication of a matrix or a vector (i.e 
            dimension [3,1]) with a scalar quantity.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Value">The scalar value to multiply the array</param>
            <param name="Mat">Array which is to be multiplied by a scalar</param>
            <returns>The multiplication of the scalar and the array as an array</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.ScalarMultiply(System.Double,MatrixLibrary.Matrix)">
            <summary>
            Returns the multiplication of a matrix or a vector (i.e 
            dimension [3,1]) with a scalar quantity.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Value">The scalar value to multiply the array</param>
            <param name="Mat">Matrix which is to be multiplied by a scalar</param>
            <returns>The multiplication of the scalar and the array as an array</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.op_Multiply(MatrixLibrary.Matrix,System.Double)">
            <summary>
            Returns the multiplication of a matrix or a vector (i.e 
            dimension [3,1]) with a scalar quantity.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat">Matrix object which is to be multiplied by a scalar</param>
            <param name="Value">The scalar value to multiply the Matrix object</param>
            <returns>
            The multiplication of the scalar and the Matrix object as a 
            Matrix object
            </returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.op_Multiply(System.Double,MatrixLibrary.Matrix)">
            <summary>
            Returns the multiplication of a matrix or a vector (i.e 
            dimension [3,1]) with a scalar quantity.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Value">The scalar value to multiply the Matrix object</param>
            <param name="Mat">Matrix object which is to be multiplied by a scalar</param>
            <returns>
            The multiplication of the scalar and the Matrix object as a 
            Matrix object
            </returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.ScalarDivide(System.Double,System.Double[0:,0:])">
            <summary>
            Returns the division of a matrix or a vector (i.e 
            dimension [3,1]) by a scalar quantity.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Value">The scalar value to divide the array with</param>
            <param name="Mat">Array which is to be divided by a scalar</param>
            <returns>The division of the array and the scalar as an array</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.ScalarDivide(System.Double,MatrixLibrary.Matrix)">
            <summary>
            Returns the division of a matrix or a vector (i.e 
            dimension [3,1]) by a scalar quantity.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Value">The scalar value to divide the array with</param>
            <param name="Mat">Matrix which is to be divided by a scalar</param>
            <returns>The division of the array and the scalar as an array</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.op_Division(MatrixLibrary.Matrix,System.Double)">
            <summary>
            Returns the division of a matrix or a vector (i.e 
            dimension [3,1]) by a scalar quantity.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Value">The scalar value to divide the Matrix object with</param>
            <param name="Mat">Matrix object which is to be divided by a scalar</param>
            <returns>
            The division of the Matrix object and the scalar as a Matrix object
            </returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.CrossProduct(System.Double[],System.Double[])">
            <summary>
            Returns the cross product of two vectors whose
            dimensions should be [3] or [3,1].
            In case of an error the error is raised as an exception.
            </summary>
            <param name="V1">First vector array (dimension [3]) in the cross product</param>
            <param name="V2">Second vector array (dimension [3]) in the cross product</param>
            <returns>Cross product of V1 and V2 as an array (dimension [3])</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.CrossProduct(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the cross product of two vectors whose
            dimensions should be [3] or [3x1].
            In case of an error the error is raised as an exception.
            </summary>
            <param name="V1">First vector array (dimensions [3,1]) in the cross product</param>
            <param name="V2">Second vector array (dimensions [3,1]) in the cross product</param>
            <returns>Cross product of V1 and V2 as an array (dimension [3,1])</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.CrossProduct(MatrixLibrary.Matrix,MatrixLibrary.Matrix)">
            <summary>
            Returns the cross product of two vectors whose
            dimensions should be [3] or [3x1].
            In case of an error the error is raised as an exception.
            </summary>
            <param name="V1">First Matrix (dimensions [3,1]) in the cross product</param>
            <param name="V2">Second Matrix (dimensions [3,1]) in the cross product</param>
            <returns>Cross product of V1 and V2 as a matrix (dimension [3,1])</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.DotProduct(System.Double[],System.Double[])">
            <summary>
            Returns the dot product of two vectors whose
            dimensions should be [3] or [3,1].
            In case of an error the error is raised as an exception.
            </summary>
            <param name="V1">First vector array (dimension [3]) in the dot product</param>
            <param name="V2">Second vector array (dimension [3]) in the dot product</param>
            <returns>Dot product of V1 and V2</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.DotProduct(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the dot product of two vectors whose
            dimensions should be [3] or [3,1].
            In case of an error the error is raised as an exception.
            </summary>
            <param name="V1">First vector array (dimension [3,1]) in the dot product</param>
            <param name="V2">Second vector array (dimension [3,1]) in the dot product</param>
            <returns>Dot product of V1 and V2</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.DotProduct(MatrixLibrary.Matrix,MatrixLibrary.Matrix)">
            <summary>
            Returns the dot product of two vectors whose
            dimensions should be [3] or [3,1].
            In case of an error the error is raised as an exception.
            </summary>
            <param name="V1">First Matrix object (dimension [3,1]) in the dot product</param>
            <param name="V2">Second Matrix object (dimension [3,1]) in the dot product</param>
            <returns>Dot product of V1 and V2</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.VectorMagnitude(System.Double[])">
            <summary>
             Returns the magnitude of a vector whose dimension is [3] or [3,1].
             In case of an error the error is raised as an exception.
            </summary>
            <param name="V">The vector array (dimension [3]) whose magnitude is to be found</param>
            <returns>The magnitude of the vector array</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.VectorMagnitude(System.Double[0:,0:])">
            <summary>
             Returns the magnitude of a vector whose dimension is [3] or [3,1].
             In case of an error the error is raised as an exception.
            </summary>
            <param name="V">The vector array (dimension [3,1]) whose magnitude is to be found</param>
            <returns>The magnitude of the vector array</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.VectorMagnitude(MatrixLibrary.Matrix)">
            <summary>
             Returns the magnitude of a vector whose dimension is [3] or [3,1].
             In case of an error the error is raised as an exception.
            </summary>
            <param name="V">Matrix object (dimension [3,1]) whose magnitude is to be found</param>
            <returns>The magnitude of the Matrix object</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.IsEqual(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Checks if two Arrays of equal dimensions are equal or not.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First array in equality check</param>
            <param name="Mat2">Second array in equality check</param>
            <returns>If two matrices are equal or not</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.IsEqual(MatrixLibrary.Matrix,MatrixLibrary.Matrix)">
            <summary>
            Checks if two matrices of equal dimensions are equal or not.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First Matrix in equality check</param>
            <param name="Mat2">Second Matrix in equality check</param>
            <returns>If two matrices are equal or not</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.op_Equality(MatrixLibrary.Matrix,MatrixLibrary.Matrix)">
            <summary>
            Checks if two matrices of equal dimensions are equal or not.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First Matrix object in equality check</param>
            <param name="Mat2">Second Matrix object in equality check</param>
            <returns>If two matrices are equal or not</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.op_Inequality(MatrixLibrary.Matrix,MatrixLibrary.Matrix)">
            <summary>
            Checks if two matrices of equal dimensions are not equal.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First Matrix object in equality check</param>
            <param name="Mat2">Second Matrix object in equality check</param>
            <returns>If two matrices are not equal</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.Equals(System.Object)">
            <summary>
            Tests whether the specified object is a MatrixLibrary.Matrix
            object and is identical to this MatrixLibrary.Matrix object.
            </summary>
            <param name="obj">The object to compare with the current object</param>
            <returns>This method returns true if obj is the specified Matrix object identical to this Matrix object; otherwise, false.</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.PrintMat(System.Double[0:,0:])">
            <summary>
            Returns a matrix as a string, so it can be viewed
            in a multi-text textbox or in a richtextBox (preferred).
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat">The array to be viewed</param>
            <returns>The string view of the array</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.PrintMat(MatrixLibrary.Matrix)">
            <summary>
            Returns a matrix as a string, so it can be viewed
            in a multi-text textbox or in a richtextBox (preferred).
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat">The Matrix object to be viewed</param>
            <returns>The string view of the Matrix object</returns>
        </member>
        <member name="M:MatrixLibrary.Matrix.ToString">
            <summary>
            Returns the matrix as a string, so it can be viewed
            in a multi-text textbox or in a richtextBox (preferred).
            In case of an error the error is raised as an exception.
            </summary>
            <returns>The string view of the Matrix object</returns>
        </member>
        <member name="P:MatrixLibrary.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Set or get an element from the matrix
            </summary>
        </member>
        <member name="P:MatrixLibrary.Matrix.NoRows">
            <summary>
            Set or get the no. of rows in the matrix.
            Warning: Setting this property will delete all of
            the elements of the matrix and set them to zero.
            </summary>
        </member>
        <member name="P:MatrixLibrary.Matrix.NoCols">
            <summary>
            Set or get the no. of columns in the matrix.
            Warning: Setting this property will delete all of
            the elements of the matrix and set them to zero.
            </summary>
        </member>
        <member name="P:MatrixLibrary.Matrix.toArray">
            <summary>
            This property returns the matrix as an array.
            </summary>
        </member>
    </members>
</doc>
